#
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates the components for asynchronous data load into a QLDB ledger via an EventBridge bus.  This template does
  not create the bus, but does create the bus rule.  It does create an SQS dead-letter queue.  Events are delivered to 
  the Lambda function asynchronously.  Lambda supports a maximum of 2 retries for asynchronous delivery to Lambda.  Event
  ordering into the ledger is accomplished through retries, so EventBridge should only be used for data loads of new
  documents, not for updates.  Otherwise, an excessive number of events will be pushed into the dead-letter queue. This 
  template is meant to demonstrate how to deploy the event receiver using a simple configuration.  The EventBridge rule 
  configuration may need to be modified to adjust to your particular EventBridge bus and transformation rules.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Ledger"
        Parameters:
          - LedgerName
          - LedgerRegion
      - Label:
          default: "Lambda Loader"
        Parameters:
          - LambdaCodeS3Bucket
          - LambdaCodeS3Key
          - LoaderHandlerName
          - RevisionWriterClass
          - LambdaMemory
          - LoaderProvisionedConcurrency
          - MaxOccRetries
          - MaxLedgerSessionsPerLambda
          - LoaderStrictMode
      - Label:
          default: "Delivery Channel Settings"
        Parameters:
          - EventBusName


Parameters:
  LedgerName:
    Description: "Name of the QLDB ledger"
    Type: "String"

  LedgerRegion:
    Description: "The region where the QLDB ledger is located.  Leave blank to use the local region."
    Type: "String"

  LambdaCodeS3Bucket:
    Description: "The S3 bucket containing this stack's Lambda code"
    Type: "String"

  LambdaCodeS3Key:
    Description: "The S3 key of the zip file containing this stack's Lambda code"
    Type: "String"

  LoaderHandlerName:
    Description: "The fully-qualified class and method names of the loader Lambda function"
    Type: "String"
    Default: "software.amazon.qldb.load.receiver.EventBridgeEventReceiver::handleRequest"

  RevisionWriterClass:
    Description: "The fully-qualified name of the RevisionWriter class the function should use to write events to the ledger."
    Type: "String"
    Default: "software.amazon.qldb.load.writer.BaseRevisionWriter"

  LambdaMemory:
    Description: "The amount of memory (GB) to allocate to the Lambda function"
    Type: Number
    Default: 2048

  LoaderProvisionedConcurrency:
    Description: "The number of Lambda instances to initialize for loading"
    Type: Number
    MinValue: 1
    Default: 10

  MaxOccRetries:
    Description: "The maximum number of times the QLDB driver will retry a transaction on OCC conflicts"
    Type: "Number"
    Default: 3

  MaxLedgerSessionsPerLambda:
    Description: "The maximum of number of concurrent QLDB sessions per Lambda function instance"
    Type: "Number"
    Default: 1

  LoaderStrictMode:
    Description: "Strict Mode setting for the loader function"
    Type: "String"
    AllowedValues:
      - "True"
      - "False"
    Default: "True"

  EventBusName:
    Description: "The name of the EventBridge event bus"
    Type: "String"
    Default: "default"


Conditions:
  RegionSet: !Not [!Equals ["", !Ref LedgerRegion]]


Resources:
  DeadLetterQueue:
    Type: AWS::SQS::Queue

  LedgerLoadFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonQLDBReadOnly"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: !Join [ "-", [ !Ref AWS::StackName, !Ref LedgerName, "LoaderLedgerAccess" ] ]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "qldb:SendCommand"
                Resource:
                  - !Join [ "", [ "arn:aws:qldb:", !If [RegionSet, !Ref LedgerRegion, !Ref AWS::Region], ":", !Ref "AWS::AccountId", ":ledger/", !Ref LedgerName ] ]
                  - !Join [ "", [ "arn:aws:qldb:", !If [RegionSet, !Ref LedgerRegion, !Ref AWS::Region], ":", !Ref "AWS::AccountId", ":ledger/", !Ref LedgerName, "/*" ] ]
              - Effect: "Allow"
                Action:
                  - "qldb:PartiQLDelete"
                  - "qldb:PartiQLInsert"
                  - "qldb:PartiQLUpdate"
                  - "qldb:PartiQLSelect"
                Resource:
                  - !Join [ "", [ "arn:aws:qldb:", !If [RegionSet, !Ref LedgerRegion, !Ref AWS::Region], ":", !Ref "AWS::AccountId", ":ledger/", !Ref LedgerName ] ]
                  - !Join [ "", [ "arn:aws:qldb:", !If [RegionSet, !Ref LedgerRegion, !Ref AWS::Region], ":", !Ref "AWS::AccountId", ":ledger/", !Ref LedgerName, "/*" ] ]
              - Effect: "Allow"
                Action:
                  - "sqs:SendMessage"
                Resource:
                  - !GetAtt DeadLetterQueue.Arn
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  LedgerLoadFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Loads documents from an EventBridge bus into a QLDB ledger"
      Runtime: java11
      Handler: !Ref LoaderHandlerName
      MemorySize: !Ref LambdaMemory
      Timeout: 30
      Role: !GetAtt LedgerLoadFunctionRole.Arn
      DeadLetterConfig:
        TargetArn: !GetAtt DeadLetterQueue.Arn
      Environment:
        Variables:
          LEDGER_NAME: !Ref LedgerName
          LEDGER_REGION: !If [RegionSet, !Ref LedgerRegion, !Ref AWS::Region]
          MAX_SESSIONS_PER_LAMBDA: !Ref MaxLedgerSessionsPerLambda
          MAX_OCC_RETRIES: !Ref MaxOccRetries
          STRICT_MODE: !Ref LoaderStrictMode
          REVISION_WRITER: !Ref RevisionWriterClass
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key

  LedgerLoadFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref LedgerLoadFunction

  LedgerLoadFunctionAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref LedgerLoadFunction
      FunctionVersion: !GetAtt LedgerLoadFunctionVersion.Version
      Name: "LedgerLoaderLatest"
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: !Ref LoaderProvisionedConcurrency

  EventBusRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EventBusName
      State: ENABLED
      EventPattern:
        detail-type:
          - "LedgerLoadEvent"
      Targets:
        - Arn: !Ref LedgerLoadFunctionAlias
          Id: !Join ["-", [!Ref LedgerName, "EventBusRule"]]
          DeadLetterConfig:
            Arn: !GetAtt DeadLetterQueue.Arn

  EventBridgeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LedgerLoadFunctionAlias
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBusRule.Arn

  EventBridgeDLQPermission:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref DeadLetterQueue
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Action:
              - "sqs:SendMessage"
            Resource: !GetAtt DeadLetterQueue.Arn
            Principal:
              Service: "events.amazonaws.com"
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt EventBusRule.Arn


Outputs:
  DeadLetterQueueUrl:
    Description: "The URL of the SQS dead-letter queue created in this stack"
    Value: !Ref DeadLetterQueue

  DeadLetterQueueName:
    Description: "The name of the SQS dead-letter queue created in this stack"
    Value: !GetAtt DeadLetterQueue.QueueName
