#
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates the components for asynchronous data load into a QLDB ledger via an SNS topic into an SQS queue.  This is 
  particularly useful for fan-out architectures where a load event needs to be distributed to, say, SQS queues in 
  multiple regions to support simultaneous multi-region writes.  This template creates the SNS topic and SQS queue.  If
  the delivery channel (topic and queue) already exists, simply use the qldb-ledger-load-via-sqs.yml template to create
  the loading logic components.  The queue is useful in this approach because Lambda does not currently subscribe to
  SNS FIFO topics, but it will subscribe to SQS FIFO queues.  If FIFO is not needed, consider using the SNS-only
  template.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Ledger"
        Parameters:
          - LedgerName
      - Label:
          default: "Lambda Loader"
        Parameters:
          - LambdaCodeS3Bucket
          - LambdaCodeS3Key
          - LoaderHandlerName
          - RevisionWriterClass
          - LambdaMemory
          - LoaderProvisionedConcurrency
          - MaxOccRetries
          - MaxLedgerSessionsPerLambda
          - LoaderStrictMode
      - Label:
          default: "Load Event Fanout"
        Parameters:
          - OrderEvents
          - FanoutTopic
          - RemoteFanoutTopicRegion
          - RemoteFanoutTopicArn

Parameters:
  LedgerName:
    Description: "Name of the QLDB ledger"
    Type: "String"

  LambdaCodeS3Bucket:
    Description: "The S3 bucket containing this stack's Lambda code"
    Type: "String"

  LambdaCodeS3Key:
    Description: "The S3 key of the zip file containing this stack's Lambda code"
    Type: "String"

  LoaderHandlerName:
    Description: "The fully-qualified class and method names of the loader Lambda function"
    Type: "String"
    Default: "software.amazon.qldb.load.receiver.SQSEventReceiver::handleRequest"

  RevisionWriterClass:
    Description: "The fully-qualified name of the RevisionWriter class the function should use to write events to the ledger."
    Type: "String"
    Default: "software.amazon.qldb.load.writer.BaseRevisionWriter"

  LambdaMemory:
    Description: "The amount of memory (GB) to allocate to the Lambda function"
    Type: Number
    Default: 2048

  LoaderProvisionedConcurrency:
    Description: "The number of Lambda instances to initialize for loading"
    Type: Number
    MinValue: 1
    Default: 10

  MaxOccRetries:
    Description: "The maximum number of times the QLDB driver will retry a transaction on OCC conflicts"
    Type: "Number"
    Default: 3

  MaxLedgerSessionsPerLambda:
    Description: "The maximum of number of concurrent QLDB sessions per Lambda function instance"
    Type: "Number"
    Default: 1

  LoaderStrictMode:
    Description: "Strict Mode setting for the loader function"
    Type: "String"
    AllowedValues:
      - "True"
      - "False"
    Default: "True"

  OrderEvents:
    Description: "Use FIFO delivery of events to specify ordering of events.  NOTE: this will affect throughput."
    Type: "String"
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"

  FanoutTopic:
    Description: "Select local to create an SNS topic in the current region.  Select remote to connect to an existing topic in another region."
    Type: "String"
    AllowedValues:
      - "Local"
      - "Remote"
    Default: "Local"

  RemoteFanoutTopicRegion:
    Description: "The AWS region where the SNS fanout topic lives [only use if FanoutTopic=Remote]"
    Type: String

  RemoteFanoutTopicArn:
    Description: "The ARN of the SNS topic to subscribe the local SQS load event queue to [only use if FanoutTopic=Remote]"
    Type: String

Conditions:
  CreateFanOut: !Equals ['Local', !Ref FanoutTopic]
  RemoteFanOut: !Equals ['Remote', !Ref FanoutTopic]
  UseFifo: !Equals ['Yes', !Ref OrderEvents]
  NoFifo: !Not [!Equals ['Yes', !Ref OrderEvents]]

  CreateFifoTopic: !And
    - !Equals ['Local', !Ref FanoutTopic]
    - !Equals ['Yes', !Ref OrderEvents]
  CreateNoFifoTopic: !And
    - !Equals [ 'Local', !Ref FanoutTopic ]
    - !Not [!Equals [ 'Yes', !Ref OrderEvents ]]

Resources:

  LedgerLoadDataQueueFifo:
    Type: AWS::SQS::Queue
    Condition: UseFifo
    Properties:
      FifoQueue: True
      FifoThroughputLimit: perMessageGroupId
      DeduplicationScope: messageGroup
      ContentBasedDeduplication: True

  LedgerLoadDataQueue:
    Type: AWS::SQS::Queue
    Condition: NoFifo

  LedgerLoadFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonQLDBReadOnly"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: !Join [ "", [ !Ref LedgerName, "LoaderLedgerAccess" ] ]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "qldb:SendCommand"
                Resource:
                  - !Join [ "", [ "arn:aws:qldb:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":ledger/", !Ref LedgerName ] ]
                  - !Join [ "", [ "arn:aws:qldb:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":ledger/", !Ref LedgerName, "/*" ] ]
              - Effect: "Allow"
                Action:
                  - "qldb:PartiQLDelete"
                  - "qldb:PartiQLInsert"
                  - "qldb:PartiQLUpdate"
                  - "qldb:PartiQLSelect"
                Resource:
                  - !Join [ "", [ "arn:aws:qldb:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":ledger/", !Ref LedgerName ] ]
                  - !Join [ "", [ "arn:aws:qldb:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":ledger/", !Ref LedgerName, "/*" ] ]
              - Effect: "Allow"
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource:
                  - !Join [ "", [ "arn:aws:sqs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !If [UseFifo, !GetAtt LedgerLoadDataQueueFifo.QueueName,  !GetAtt LedgerLoadDataQueue.QueueName] ]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"


  LedgerLoadFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Loads documents from SQS into a QLDB ledger"
      Runtime: java11
      Handler: !Ref LoaderHandlerName
      MemorySize: !Ref LambdaMemory
      Timeout: 30
      Role: !GetAtt LedgerLoadFunctionRole.Arn
      Environment:
        Variables:
          LEDGER_NAME: !Ref LedgerName
          MAX_SESSIONS_PER_LAMBDA: !Ref MaxLedgerSessionsPerLambda
          MAX_OCC_RETRIES: !Ref MaxOccRetries
          STRICT_MODE: !Ref LoaderStrictMode
          REVISION_WRITER: !Ref RevisionWriterClass
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key


  LedgerLoadFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref LedgerLoadFunction


  LedgerLoadFunctionAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref LedgerLoadFunction
      FunctionVersion: !GetAtt LedgerLoadFunctionVersion.Version
      Name: "LedgerLoaderLatest"
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: !Ref LoaderProvisionedConcurrency


  LedgerLoadFunctionMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !Ref LedgerLoadFunctionAlias
      EventSourceArn: !If [UseFifo, !GetAtt LedgerLoadDataQueueFifo.Arn,  !GetAtt LedgerLoadDataQueue.Arn]
      BatchSize: 10
      Enabled: true
      FunctionResponseTypes:
        - "ReportBatchItemFailures"


  LoadEventFanoutTopic:
    Type: AWS::SNS::Topic
    Condition: CreateNoFifoTopic
    Properties:
      Subscription:
        - Protocol: "sqs"
          Endpoint: !GetAtt LedgerLoadDataQueue.Arn


  LoadEventFanoutTopicFifo:
    Type: AWS::SNS::Topic
    Condition: CreateFifoTopic
    Properties:
      TopicName: "AsyncLedgerLoaderFanoutTopic.fifo"
      ContentBasedDeduplication: True
      FifoTopic: True
      Subscription:
        - Protocol: "sqs"
          Endpoint:  !GetAtt LedgerLoadDataQueueFifo.Arn


  GrantFanoutTopicAccessToQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Condition: CreateFanOut
    Properties:
      Queues:
        - !If [UseFifo, !Ref LedgerLoadDataQueueFifo,  !Ref LedgerLoadDataQueue]
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Action:
              - "SQS:SendMessage"
            Resource: !If [UseFifo, !GetAtt LedgerLoadDataQueueFifo.Arn,  !GetAtt LedgerLoadDataQueue.Arn]
            Principal:
              Service: "sns.amazonaws.com"
            Condition:
              ArnEquals:
                aws:SourceArn: !If [UseFifo, !Ref LoadEventFanoutTopicFifo, !Ref LoadEventFanoutTopic]


  GrantFanoutRemoteTopicAccessToQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Condition: RemoteFanOut
    Properties:
      Queues:
        - !If [UseFifo, !Ref LedgerLoadDataQueueFifo,  !Ref LedgerLoadDataQueue]
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Action:
              - "SQS:SendMessage"
            Resource: !If [UseFifo, !GetAtt LedgerLoadDataQueueFifo.Arn,  !GetAtt LedgerLoadDataQueue.Arn]
            Principal:
              Service: "sns.amazonaws.com"
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref RemoteFanoutTopicArn


  RemoteFanoutTopicSubscription:
    Type: AWS::SNS::Subscription
    Condition: RemoteFanOut
    Properties:
      Endpoint: !If [UseFifo, !GetAtt LedgerLoadDataQueueFifo.Arn,  !GetAtt LedgerLoadDataQueue.Arn]
      Protocol: "sqs"
      Region: !Ref RemoteFanoutTopicRegion
      TopicArn: !Ref RemoteFanoutTopicArn

Outputs:
  TopicName:
    Description: "The name of the SNS loader topic"
    Value:
      !If [CreateFifoTopic, !GetAtt LoadEventFanoutTopicFifo.TopicName, !If [CreateNoFifoTopic, !GetAtt LoadEventFanoutTopic.TopicName, !Ref RemoteFanoutTopicArn]]

  TopicArn:
    Description: "The ARN of the SNS loader topic"
    Value:
      !If [CreateFifoTopic, !Ref LoadEventFanoutTopicFifo, !If [CreateNoFifoTopic, !Ref LoadEventFanoutTopic, !Ref RemoteFanoutTopicArn]]

  QueueName:
    Description: "The name of the SQS document loader queue."
    Value: !If [UseFifo, !GetAtt LedgerLoadDataQueueFifo.QueueName, !GetAtt LedgerLoadDataQueue.QueueName]

  QueueArn:
    Description: "The ARN of the SQS document loader queue."
    Value: !If [UseFifo, !GetAtt LedgerLoadDataQueueFifo.Arn, !GetAtt LedgerLoadDataQueue.Arn]
